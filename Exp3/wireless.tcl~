set val(chan)           Channel/WirelessChannel   
set val(prop)           Propagation/TwoRayGround  
set val(netif)          Phy/WirelessPhy        
set val(mac)            Mac/802_11              
set val(ifq)            Queue/DropTail/PriQueue  
set val(ll)             LL                     
set val(ant)            Antenna/OmniAntenna       
set val(ifqlen)         50                        
set val(nn)             10                          
set val(rp)             AODV                     


set ns_		[new Simulator]
set tracefd     [open aodv.tr w]
$ns_ trace-all $tracefd

set topo       [new Topography]

$topo load_flatgrid 500 500

set namfile [open aodv.nam w]

create-god $val(nn)

        $ns_ node-config -adhocRouting $val(rp) \
			 -llType $val(ll) \
			 -macType $val(mac) \
			 -ifqType $val(ifq) \
			 -ifqLen $val(ifqlen) \
			 -antType $val(ant) \
			 -propType $val(prop) \
			 -phyType $val(netif) \
			 -channelType $val(chan) \
			 -topoInstance $topo \
			 -agentTrace ON \
			 -routerTrace ON \
			 -macTrace OFF \
			 -movementTrace OFF			
			 
	for {set i 0} {$i < $val(nn) } {incr i} {
		set node_($i) [$ns_ node]	
		$node_($i) random-motion 0		
	}

#
# Provide initial (X,Y, for now Z=0) co-ordinates for mobilenodes
#
$node_(0) set X_ 5.0
$node_(0) set Y_ 2.0
$node_(0) set Z_ 0.0

$node_(1) set X_ 15
$node_(1) set Y_ 20
$node_(1) set Z_ 0.0

$node_(2) set X_ 30
$node_(2) set Y_ 100
$node_(2) set Z_ 0.0

$node_(3) set X_ 390.0
$node_(3) set Y_ 385.0
$node_(3) set Z_ 0.0

$node_(4) set X_ 110
$node_(4) set Y_ 190
$node_(4) set Z_ 0.0

$node_(5) set X_ 236
$node_(5) set Y_ 365
$node_(5) set Z_ 0.0

$node_(6) set X_ 500
$node_(6) set Y_ 500
$node_(6) set Z_ 0.0

$node_(7) set X_ 400
$node_(7) set Y_ 400
$node_(7) set Z_ 0.0

$node_(8) set X_ 300
$node_(8) set Y_ 300
$node_(8) set Z_ 0.0

$node_(9) set X_ 150
$node_(9) set Y_ 385.0
$node_(9) set Z_ 0.0


set tcp [new Agent/TCP]
$tcp set class_ 2
set sink [new Agent/TCPSink]
$ns_ attach-agent $node_(0) $tcp
$ns_ attach-agent $node_(1) $sink
$ns_ connect $tcp $sink
set ftp [new Application/FTP]
$ftp attach-agent $tcp
$ns_ at 10.0 "$ftp start" 

set tcp [new Agent/TCP]
$tcp set class_ 2
set sink [new Agent/TCPSink]
$ns_ attach-agent $node_(2) $tcp
$ns_ attach-agent $node_(3) $sink
$ns_ connect $tcp $sink
set ftp [new Application/FTP]
$ftp attach-agent $tcp
$ns_ at 10.0 "$ftp start" 

set tcp [new Agent/TCP]
$tcp set class_ 2
set sink [new Agent/TCPSink]
$ns_ attach-agent $node_(4) $tcp
$ns_ attach-agent $node_(5) $sink
$ns_ connect $tcp $sink
set ftp [new Application/FTP]
$ftp attach-agent $tcp
$ns_ at 10.0 "$ftp start" 

set tcp [new Agent/TCP]
$tcp set class_ 2
set sink [new Agent/TCPSink]
$ns_ attach-agent $node_(6) $tcp
$ns_ attach-agent $node_(7) $sink
$ns_ connect $tcp $sink
set ftp [new Application/FTP]
$ftp attach-agent $tcp
$ns_ at 10.0 "$ftp start" 
set tcp [new Agent/TCP]
$tcp set class_ 2
set sink [new Agent/TCPSink]
$ns_ attach-agent $node_(8) $tcp
$ns_ attach-agent $node_(9) $sink
$ns_ connect $tcp $sink
set ftp [new Application/FTP]
$ftp attach-agent $tcp
$ns_ at 10.0 "$ftp start" 

#
# Tell nodes when the simulation ends
#
for {set i 0} {$i < $val(nn) } {incr i} {
    $ns_ at 150.0 "$node_($i) reset";
}
$ns_ at 150.0 "stop"
$ns_ at 150.01 "puts \"NS EXITING...\" ; $ns_ halt"
proc stop {} {
    global ns_ tracefd
    $ns_ flush-trace
    close $tracefd
}

puts "Starting Simulation..."
$ns_ run


